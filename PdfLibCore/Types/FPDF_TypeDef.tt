<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
//This types from here: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h from line: // PDF types - use incomplete types (never completed) just for API type safety.
    string[] Names = {
                        "FPDF_ACTION",
                        "FPDF_ANNOTATION",
                        "FPDF_ATTACHMENT",
                        "FPDF_BITMAP",
                        "FPDF_BOOKMARK",
                        "FPDF_CLIPPATH",
                        "FPDF_DEST",
                        "FPDF_DOCUMENT",
                        "FPDF_FONT",
                        "FPDF_FORMHANDLE",
                        "FPDF_JAVASCRIPT_ACTION",
                        "FPDF_LINK",
                        "FPDF_PAGE",
                        "FPDF_PAGELINK",
                        "FPDF_PAGEOBJECT",  // Page object(text, path, etc)
                        "FPDF_PAGEOBJECTMARK",
                        "FPDF_PAGERANGE",
                        "FPDF_PATHSEGMENT",
                        "FPDF_RECORDER",
                        "FPDF_SCHHANDLE",
                        "FPDF_STRUCTELEMENT",
                        "FPDF_STRUCTTREE",
                        "FPDF_TEXTPAGE",
                        "FPDF_WIDGET" };
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace PdfLibCore.Types
{
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
foreach (string name in Names)
{
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
	/// <summary>Handle to a <#=name#></summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct <#=name#> : IHandle<<#=name#>>
	{
		public IntPtr Pointer;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => Pointer == IntPtr.Zero;

		public override string ToString() => "<#=name#>: 0x" + Pointer.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static <#=name#> Null => new <#=name#>();

		<#=name#>(IntPtr ptr)
		{
			Pointer = ptr;
		}

		<#=name#> IHandle<<#=name#>>.SetToNull() => new <#=name#>(Interlocked.Exchange(ref Pointer, IntPtr.Zero));
	}

<# // ------------------------------------------------------ Code Start ------------------------------------------------------
}
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
}